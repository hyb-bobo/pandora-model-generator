######################################
#         log4j配置相关说明
######################################
#log4j.appender.appender1=org.apache.log4j.日志输出到哪儿
# ConsoleAppender（控制台）
# FileAppender（文件）
# DailyRollingFileAppender（每天产生一个日志文件）
# RollingFileAppender（文件大小到达指定尺寸时产生一个新的文件）
# WriteAppender（将日志信息以流格式发送到任意指定的地方）
# JDBCAppender（将日志信息保存到数据库中）
  
# log4j提供4种布局:
# org.apache.log4j.HTMLLayout（以HTML表格形式布局）
# org.apache.log4j.PatternLayout（可以灵活地指定布局模式）
# org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串） 
# org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）

#log4j.appender.appender1.layout.ConversionPattern=日志输出格式
# 例如，%d - %m%n或%d{yyyy-MM-dd HH:mm:ss} %p [%c] %m%n
# %c 输出日志信息所属的类的全名
# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy-M-dd HH:mm:ss }，输出类似：2002-10-18- 22：10：28
# %f 输出日志信息所属的类的类名
# %l 输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行
# %m 输出代码中指定的信息，如log(message)中的message
# %n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。如果是调用debug()输出的，则为DEBUG，依此类推
# %r 输出自应用启动到输出该日志信息所耗费的毫秒数
# %t 输出产生该日志事件的线程名

# log4j中有五级logger 输出级别:
# FATAL 0
# ERROR 3
# WARN 4
# INFO 6
# DEBUG 7
  
######################################
#          log4j相关配置
######################################
log4j.rootLogger=info,stdout
log4j.logger.org.springframework=warn
log4j.logger.net.sf=error

######################################
#     设置stdout的日志输出控制台
######################################
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
# 设置使用灵活布局
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=[%p][%d{HH:mm:ss}] %m %n

######################################
#       设置file的日志输出文件
######################################
log4j.appender.file=org.apache.log4j.DailyRollingFileAppender
log4j.appender.file.File=${webapp.root}/WEB-INF/logs/log
# 设置日志后缀格式
log4j.appender.file.DatePattern='.'yyyy-MM-dd
# 最多只保存20个备份文件
# log4j:WARN No such property [maxBackupIndex] in org.apache.log4j.DailyRollingFileAppender.
#log4j.appender.file.MaxBackupIndex=20
# 是否追加写入
log4j.appender.file.Append=true
# 设置使用灵活布局
log4j.appender.file.layout=org.apache.log4j.PatternLayout  
log4j.appender.file.layout.ConversionPattern=[%p][%d{HH:mm:ss}] %l %t %m %n

######################################
#       Define the DB appender
######################################
# DROP TABLE IF EXISTS `t_logs`;
# CREATE TABLE `t_logs` (
#   `Id` int(11) NOT NULL AUTO_INCREMENT,
#   `data` varchar(255) DEFAULT NULL,
#   `user_id` varchar(255) DEFAULT NULL,
#   `after_operation_value` text,
#   `level` varchar(255) DEFAULT NULL,
#   `message` text,
#   PRIMARY KEY (`Id`)
# ) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;
######################################
#log4j.appender.DB=org.apache.log4j.jdbc.JDBCAppender
#log4j.appender.DB.driver=com.mysql.jdbc.Driver
#------------EU------------
#log4j.appender.DB.URL=jdbc:mysql://172.18.22.202:3306/apollo_eu_erp?Unicode=true&amp;characterEncoding=UTF-8
#------------OS------------
#log4j.appender.DB.URL=jdbc:mysql://172.18.22.202:3306/apollo_os?Unicode=true&amp;characterEncoding=UTF-8
#------------AS------------
#log4j.appender.DB.URL=jdbc:mysql://172.18.22.202:3306/apollo_as?Unicode=true&amp;characterEncoding=UTF-8
#log4j.appender.DB.user=root
#log4j.appender.DB.password=123qwe
#log4j.appender.DB.user=renesola
#log4j.appender.DB.password=renes0la.xx
# Define the layout for file appender
#log4j.appender.DB.layout=org.apache.log4j.PatternLayout
#log4j.appender.DB.DatePattern=yyyy-MM-dd hh:mm:ss
# Set the SQL statement to be executed.
#log4j.appender.DB.sql=INSERT INTO t_logs(data,user_id, after_operation_value,level,message) VALUES('%d{yyyy-MM-dd hh:mm:ss}', '%X{userId}', '%X{afterOperation}', '%p', '%m')
 
######################################
#           异步输出日志
######################################
#log4j.appender.async=org.apache.log4j.AsyncAppender
#log4j.appender.async.BufferSize=1000
#log4j.appender.async.Blocking=false
#log4j.appender.async.appender-ref=file,DB
  